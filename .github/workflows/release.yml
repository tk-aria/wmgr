name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: read

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    env:
      RELEASE_TAG: ${{ github.event.inputs.tag || github.ref_name || 'v0.1.0' }}
    strategy:
      matrix:
        include:
          # Linux (glibc)
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            os_name: linux
            arch_name: x86_64
          
          # Linux (musl)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            os_name: linux-musl
            arch_name: x86_64
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            os_name: linux-musl
            arch_name: aarch64
          
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            os_name: darwin
            arch_name: x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            os_name: darwin
            arch_name: aarch64
          
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            os_name: windows
            arch_name: x86_64
            extension: .exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install musl-tools (Linux musl)
        if: contains(matrix.target, 'musl')
        run: |
          # Wait for apt lock to be released
          while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 1; done
          sudo apt-get update
          sudo apt-get install -y musl-tools
          # Disable GCC fortify functions for all musl builds
          echo "CFLAGS=-U_FORTIFY_SOURCE" >> $GITHUB_ENV
          echo "CXXFLAGS=-U_FORTIFY_SOURCE" >> $GITHUB_ENV
          
      - name: Install aarch64 musl cross-compiler
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          # Wait for apt lock to be released
          while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 1; done
          sudo apt-get install -y gcc-aarch64-linux-gnu libcurl4-openssl-dev libssl-dev zlib1g-dev
          # Set environment variables for cross-compilation
          echo "CC_aarch64_unknown_linux_musl=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_musl=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          # Configure curl-sys to use static linking
          echo "CURL_STATIC=1" >> $GITHUB_ENV
          echo "CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt" >> $GITHUB_ENV
          # Disable OpenSSL vendor for git2
          echo "LIBGIT2_NO_VENDOR=1" >> $GITHUB_ENV
          
      - name: Install OpenSSL (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV



      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/wmgr wmgr
          tar -czf wmgr-${{ env.RELEASE_TAG }}-${{ matrix.os_name }}-${{ matrix.arch_name }}.tar.gz wmgr

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\wmgr.exe wmgr.exe
          tar -czf wmgr-${{ env.RELEASE_TAG }}-${{ matrix.os_name }}-${{ matrix.arch_name }}.tar.gz wmgr.exe

      - name: Upload artifact (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: wmgr-${{ env.RELEASE_TAG }}-${{ matrix.os_name }}-${{ matrix.arch_name }}.tar.gz
          path: wmgr-${{ env.RELEASE_TAG }}-${{ matrix.os_name }}-${{ matrix.arch_name }}.tar.gz

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: wmgr-${{ env.RELEASE_TAG }}-${{ matrix.os_name }}-${{ matrix.arch_name }}.tar.gz
          path: wmgr-${{ env.RELEASE_TAG }}-${{ matrix.os_name }}-${{ matrix.arch_name }}.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    env:
      RELEASE_TAG: ${{ github.event.inputs.tag || github.ref_name || 'v0.1.0' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display downloaded files
        run: |
          echo "Available artifacts:"
          ls -la artifacts/ || echo "No artifacts directory found"
          find artifacts/ -name "*.tar.gz" -type f 2>/dev/null || echo "No tar.gz files found"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.RELEASE_TAG }}
          tag_name: ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/wmgr-${{ env.RELEASE_TAG }}-linux-x86_64.tar.gz/wmgr-${{ env.RELEASE_TAG }}-linux-x86_64.tar.gz
            artifacts/wmgr-${{ env.RELEASE_TAG }}-linux-musl-x86_64.tar.gz/wmgr-${{ env.RELEASE_TAG }}-linux-musl-x86_64.tar.gz
            artifacts/wmgr-${{ env.RELEASE_TAG }}-linux-musl-aarch64.tar.gz/wmgr-${{ env.RELEASE_TAG }}-linux-musl-aarch64.tar.gz
            artifacts/wmgr-${{ env.RELEASE_TAG }}-darwin-x86_64.tar.gz/wmgr-${{ env.RELEASE_TAG }}-darwin-x86_64.tar.gz
            artifacts/wmgr-${{ env.RELEASE_TAG }}-darwin-aarch64.tar.gz/wmgr-${{ env.RELEASE_TAG }}-darwin-aarch64.tar.gz
            artifacts/wmgr-${{ env.RELEASE_TAG }}-windows-x86_64.tar.gz/wmgr-${{ env.RELEASE_TAG }}-windows-x86_64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}