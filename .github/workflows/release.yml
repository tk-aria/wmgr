name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            os_name: linux
            arch_name: x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            os_name: linux
            arch_name: aarch64
          
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            os_name: darwin
            arch_name: x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            os_name: darwin
            arch_name: aarch64
          
          # Windows
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            os_name: windows
            arch_name: x86_64
            extension: .exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cargo for cross compilation (Linux aarch64)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cat >>~/.cargo/config.toml <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF

      - name: Install mingw-w64 (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install mingw

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/wmgr wmgr
          tar -czf wmgr-${{ github.event.inputs.tag || github.ref_name }}-${{ matrix.os_name }}-${{ matrix.arch_name }}.tar.gz wmgr

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\wmgr.exe wmgr.exe
          tar -czf wmgr-${{ github.event.inputs.tag || github.ref_name }}-${{ matrix.os_name }}-${{ matrix.arch_name }}.tar.gz wmgr.exe

      - name: Upload artifact (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: wmgr-${{ github.event.inputs.tag || github.ref_name }}-${{ matrix.os_name }}-${{ matrix.arch_name }}.tar.gz
          path: wmgr-${{ github.event.inputs.tag || github.ref_name }}-${{ matrix.os_name }}-${{ matrix.arch_name }}.tar.gz

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: wmgr-${{ github.event.inputs.tag || github.ref_name }}-${{ matrix.os_name }}-${{ matrix.arch_name }}.tar.gz
          path: wmgr-${{ github.event.inputs.tag || github.ref_name }}-${{ matrix.os_name }}-${{ matrix.arch_name }}.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display downloaded files
        run: ls -la artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.event.inputs.tag || github.ref_name }}
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/wmgr-${{ github.event.inputs.tag || github.ref_name }}-linux-x86_64.tar.gz/wmgr-${{ github.event.inputs.tag || github.ref_name }}-linux-x86_64.tar.gz
            artifacts/wmgr-${{ github.event.inputs.tag || github.ref_name }}-linux-aarch64.tar.gz/wmgr-${{ github.event.inputs.tag || github.ref_name }}-linux-aarch64.tar.gz
            artifacts/wmgr-${{ github.event.inputs.tag || github.ref_name }}-darwin-x86_64.tar.gz/wmgr-${{ github.event.inputs.tag || github.ref_name }}-darwin-x86_64.tar.gz
            artifacts/wmgr-${{ github.event.inputs.tag || github.ref_name }}-darwin-aarch64.tar.gz/wmgr-${{ github.event.inputs.tag || github.ref_name }}-darwin-aarch64.tar.gz
            artifacts/wmgr-${{ github.event.inputs.tag || github.ref_name }}-windows-x86_64.tar.gz/wmgr-${{ github.event.inputs.tag || github.ref_name }}-windows-x86_64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}