searchState.loadedDescShard("wmgr", 0, "wmgr - Git Repository Manager\n廃止予定警告\n拡張マニフェスト定義（Deep/Future …\nFuture Manifest設定\nインクルード情報\nマニフェストインクルード定義\nDeepManifest/FutureManifestのサポート設定\nマニフェストサービス\nManifestService関連のエラー\nマニフェスト処理結果\n処理済みマニフェストのキャッシュ\nデフォルト設定でManifestServiceを作成\n廃止予定の機能\n循環依存の検出を有効にするか\n…\n廃止予定の機能名\nリモートコンテンツを取得\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n将来のバージョンでのマニフェスト設定\n将来のデフォルト設定\n特定のグループの詳細情報を取得\n…\nHTTPクライアント\nインクルードする他のマニフェスト\nインクルードされたマニフェストの情報\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nグループ一覧を取得\n基本のマニフェスト情報\n処理されたマニフェスト\nDeep manifestの最大深度\nマニフェストをマージ\n警告メッセージ\n最小バージョン要件\n新しいManifestServiceインスタンスを作成\n処理オプション\n…\n文字列からマニフェストを解析\nURL からマニフェストを読み込み・解析\nインクルードの優先度（高い方が優先）\nDeep manifestを処理\nFuture manifest設定を処理\n廃止予定バージョン\nインクルードから取得されたリポジトリ数\nインクルードURLを解決\n…\n実際に使用されたリビジョン\nマニフェストをJSON文字列にシリアライズ\nマニフェストをYAML文字列にシリアライズ\nタイムアウト設定（秒）\nインクルードするマニフェストのURL\nインクルード元のURL\nマニフェストを検証\n処理中に発生した警告\n監査結果\n監査結果の概要\nセキュリティ関連のエラー\nセキュリティサービス\n脆弱性情報\n脆弱性の重要度レベル\n依存関係の脆弱性監査を実行\n…\n概要を計算\ncargo-auditのパス（デフォルトは“cargo“）\ncargo-auditが利用可能かチェック\n脆弱性の説明\nJSONから脆弱性情報を抽出\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n脆弱性ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n新しいSecurityServiceインスタンスを作成\nパッケージ名\n監査結果をパース\n重要度文字列をパース\n修正版が利用可能か\n監査されたプロジェクトパス\ncargo-auditを実行\n脆弱性の重要度\n監査実行時刻\n脆弱性のURL\n影響を受けるバージョン\n発見された脆弱性のリスト\n警告の数（重要度別）\nカスタムのcargoパスを指定\n単一リポジトリでのコマンド実行結果\nコマンド実行の状態\n失敗\nForeach実行の設定\nForeachCommand関連のエラー\nForeach実行のユースケース\n全体の実行結果\n実行中（並列処理時）\nスキップ（リポジトリが存在しない等）\n成功\nタイムアウト\nコマンド結果を追加\n…\nワークスペースが初期化済みかチェック\n実行するコマンド\n設定\nエラーが発生した場合でも継続するか\nリポジトリの相対パス\n実行対象リポジトリの決定\n追加の環境変数\nエラーメッセージ（失敗時）\nForeach実行を実行\n単一リポジトリでコマンド実行\n並列実行\n順次実行\n実行時間（ミリ秒）\n終了コード\n失敗した結果のみを取得\n失敗したリポジトリ数\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n失敗したかチェック\n成功したかチェック\n全体的に成功したかチェック\n最大並列数（Noneの場合はCPU数）\n新しいForeachCommandUseCaseインスタンスを作成\n新しいForeachCommandConfigインスタンスを作成\n新しいCommandResultを作成\n並列実行するか\n実際のコマンド実行（疑似実装）\n環境変数の準備\n各リポジトリでの実行結果\nスキップされたリポジトリ数\n実行ステータス\n標準エラー出力\n標準出力\n成功したリポジトリ数\nコマンドのタイムアウト（秒）\n合計リポジトリ数\n総実行時間（ミリ秒）\nコマンドの検証\n詳細ログを出力するか\n並列実行されたか\n作業ディレクトリ変更フラグを設定\nエラー継続フラグを設定\n環境変数を追加\n失敗状態に設定\nグループフィルタを設定\n並列実行を有効化\nスキップ状態に設定\n成功状態に設定\nタイムアウトを設定\nタイムアウト状態に設定\n詳細ログを有効化\nワークスペース初期化の設定\nInitWorkspace関連のエラー\nワークスペース初期化のユースケース\nワークスペース設定ファイルの構造\n…\nワークスペースパスの存在チェック\nマニフェストリポジトリをクローン\n作業用の設定\nワークスペースエンティティを作成\n.tsrc/config.yml の作成\nワークスペースを初期化\n既存のワークスペースを強制上書きするか\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconfig.yamlの内容を生成\n…\n使用するグループ\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nマニフェストブランチ\nマニフェストのURL\nマニフェストURL\n新しいInitWorkspaceUseCaseインスタンスを作成\n…\nGit clone実行（疑似実装）\nマニフェストファイルの読み込み\nシャローコピーを使用するか\nシャローコピー設定\nワークスペースのルートパス\n単一リポジトリの監査結果\nセキュリティ監査の設定\nセキュリティ監査関連のエラー\nセキュリティ監査のユースケース\n全体の監査結果\n監査結果を追加\n単一リポジトリの監査\n監査結果\n監査されたリポジトリ数\nワークスペースが初期化済みかチェック\n設定\nリポジトリの相対パス\n監査対象リポジトリの決定\nエラーメッセージ（監査失敗時）\nエラーが発生したリポジトリ数\nセキュリティ監査を実行\n並列監査実行\n順次監査実行\nCritical/High脆弱性でエラーとするか\n失敗した結果のみを取得\nRustプロジェクトをフィルタリング\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n…\nCritical/High脆弱性があるかチェック\nCritical/High脆弱性があるかチェック\n脆弱性が見つかったかチェック\n脆弱性が見つかったかチェック\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRustプロジェクトかどうかを判定\nRustプロジェクトかどうかThe\n監査に成功したかチェック\n全体的に成功したかチェック\n最大並列数（Noneの場合はCPU数）\n新しいSecurityAuditUseCaseインスタンスを作成\n新しいSecurityAuditConfigインスタンスを作成\n並列監査を実行するか\n脆弱性の概要を表示\n各リポジトリの監査結果\nセキュリティサービス\n…\n合計リポジトリ数\n詳細ログを出力するか\n脆弱性が見つかったリポジトリ数\n脆弱性のある結果のみを取得\n並列実行されたか\n脆弱性時のエラー処理を設定\nグループフィルタを設定\n並列実行を設定\nカスタムセキュリティサービスを指定\n詳細ログを設定\nクリーン（変更なし）\nダーティ（未コミットの変更あり）\nエラー状態\nGit status情報\n存在しない\nリモートと差分あり\nリポジトリの状態\n単一リポジトリのステータス\nステータス確認の設定\nStatusCheck関連のエラー\nステータス確認のユースケース\n全体のステータス結果\nブランチが期待と異なる\nリポジトリステータスを追加\n単一リポジトリのステータス確認\nワークスペースが初期化済みかチェック\n正常なリポジトリ数\nリモートより進んでいるコミット数\nリモートより遅れているコミット数\nコンパクト表示を使用するか\n設定\n現在のブランチ\nリポジトリの相対パス\nステータス確認対象リポジトリの決定\n問題のあるリポジトリ数\nエラーのあるリポジトリ数\nエラーメッセージ（エラー状態の場合）\nステータス確認を実行\n期待されるブランチ\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n…\n問題があるかチェック\n全体的に問題があるかチェック\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n見つからないリポジトリ数\n変更されたファイル数\n新しいStatusCheckUseCaseインスタンスを作成\n新しいRepositoryStatusを作成\nGit status情報を取得\n各リポジトリのステータス\nブランチ情報を表示するか\nステージされたファイル数\nリポジトリの状態\n合計リポジトリ数\n未追跡ファイル数\n詳細ログを出力するか\nブランチ情報を設定\nエラー状態に設定\nファイル変更情報を設定\nリモート差分情報を設定\n新規クローン\nスキップ（エラーまたは設定による）\n同期操作の種類\nリポジトリ同期の設定\nSyncRepositories関連のエラー\nリポジトリ同期のユースケース\n同期操作の結果\n既存リポジトリの更新\nローカル変更の有無をチェック\nワークスペースが初期化済みかチェック\nリポジトリのクローン\n新規クローンされたリポジトリの数\n同期設定\n同期対象リポジトリの決定\n発生したエラーのリスト\nリポジトリ同期を実行\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n現在のブランチを取得\n…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n新しいSyncRepositoriesUseCaseインスタンスを作成\n…\n並列実行の最大数（Noneの場合はCPU数）\nGit checkoutの実行\nGit clone実行（実際のGit操作）\nGit fetchの実行\nFast-forward mergeの実行\n…\n…\nブランチの同期（fast-forward merge）\nリポジトリの同期実行\n単一リポジトリの同期\n同期されたリポジトリの数\nマニフェストの更新\nリモート設定の更新\n既存リポジトリの更新\n更新されたリポジトリの数\n詳細ログを出力するか\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nキャンセル済み\n実行可能なタスクを表すトレイト\nタスク実行設定\n失敗\n待機中\n実行中\n成功\nタスク実行エンジン\nタスクの進捗情報\nタスクの実行結果\nタスクの実行状態を表す列挙型\nタイムアウト\n全ての実行中タスクをキャンセル\n指定されたタスクをキャンセル\n実行終了時刻\nタスクの依存関係を取得（オプション）\n依存関係解決のタイムアウト\n実行にかかった時間\n…\n推定残り時間\nタスクを実行\n単一のタスクを実行\n複数のタスクを並列実行\n依存関係を考慮したタスク実行\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nタスクIDを取得\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n失敗したかどうかを判定\n成功したかどうかを判定\n最大同時実行数\n進捗メッセージ\n新しいタスク実行エンジンを作成\n…\n現在の進捗（0.0-1.0）\nプログレス報告間隔\n実行結果\nエラー時の自動リトライ回数\nリトライ間隔\n実行開始時刻\nタスクの状態\nタスクID\nタスクID\nタスクのタイムアウト時間\nプログレス監視を有効にする\nContains the error value\nContains the success value\nOptionのエラー変換ヘルパー\nResultのエラー変換ヘルパー\n…\nチェーンオペレーション用のヘルパー\nasync関数用のヘルパー\nResultをTsrcResultに変換する\n…\nOptionをTsrcResultに変換する\nOption値をValidationErrorに変換する\nOptionに変換（エラーをログ出力）\nデフォルト値でエラーを無視\nエラー時にコンテキストを追加\n…\nGitエラーとしてTsrcResultに変換\n…\nタイムアウト付きasync実行\nTemplate replacement functionality\nReturns the argument unchanged.\nGet the default wmgr.yaml template with optional processing\nTemplates module for embedded YAML templates This module …\nCalls <code>U::from(self)</code>.\nCreate a new template processor\nProcess template with optional replacements For now, …\nファイルコピー操作\nシンボリックリンク操作\nグループの定義\nマニフェストファイルの構造\nマニフェストのリポジトリ定義\nブランチ名（オプション）\nファイルコピー操作の定義\nデフォルトブランチ（オプション）\nグループの説明（オプション）\nワークスペース内での相対パス\n…\n…\ndestでリポジトリを検索\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n特定のグループに属するリポジトリを取得\nグループ定義（オプション）\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n新しいGroupインスタンスを作成\n新しいManifestRepoインスタンスを作成\n新しいManifestインスタンスを作成\n追加のリモート定義\n…\nリポジトリのリスト\nSHA1ハッシュ（オプション）\nshallow cloneを使用するか\n…\nシンボリックリンク操作の定義\nタグ（オプション）\nリンク先（sourceからの相対パス）\n…\nRepositoryエンティティに変換\nリポジトリのURL\nデフォルトブランチを設定\n説明を設定\nグループを設定\nリモートリポジトリの情報\nリポジトリエンティティ\n対象ブランチ名\n…\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nデフォルトのリモート（origin）を取得\n特定の名前のリモートを取得\n…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nベアリポジトリかどうか\nデフォルトブランチかどうか\nブランチを維持するかどうか\nリモート名（例: origin）\n新しいRemoteインスタンスを作成\n新しいRepositoryインスタンスを作成\n元のブランチ名（同期前のブランチ）\nリモートリポジトリのリスト\n固定されたSHA1ハッシュ\n完全なSHA1ハッシュ\nshallow cloneを使用するか\nタグ名\nリモートのURL\nブランチを設定\nSHA1を設定\nshallow cloneを有効化\nタグを設定\n破損（設定ファイルが不正など）\n初期化済み（設定ファイルが存在する）\n…\nwmgrワークスペースのエンティティ\nワークスペースの設定\nワークスペースの状態\n…\nワークスペースの設定\nconfig.ymlファイルのパスを取得\n…\n…\nwalkdir + regex …\n特定のdestでリポジトリを検索\n特定のdestでリポジトリを検索（mutable）\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nワークスペースが破損しているか\nワークスペースが初期化されているか\nデフォルトグループのみを使用しているか\n…\n現在のマニフェスト\nマニフェストのブランチ\nマニフェストディレクトリのパスを取得 …\n…\nマニフェストリポジトリのURL\n新しいWorkspaceConfigインスタンスを作成\n新しいWorkspaceインスタンスを作成\n使用するリポジトリグループのリスト\n特定のリポジトリのパスを取得\nワークスペース内のリポジトリリスト\nワークスペースのルートパス\nshallow cloneを使用するか\n単一リモート名（設定されている場合）\nワークスペースの状態\n.tsrcディレクトリのパスを取得\n全リポジトリクローンを有効化\nマニフェストを設定\nリポジトリグループを設定\nリポジトリリストを設定\nshallow cloneを有効化\n単一リモートを設定\nワークスペースの状態を設定\nGitブランチ名の値オブジェクト\nBranchName関連のエラー\nブランチの種類\nブランチ名を文字列として取得\nブランチの種類を取得\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nブランチ名を所有権付きで取得\nデフォルトブランチかどうかを判定\nフィーチャーブランチかどうかを判定\nホットフィックスブランチかどうかを判定\nリリースブランチかどうかを判定\n検証済みブランチ名\n新しいBranchNameインスタンスを作成\nブランチ名の妥当性を検証\nファイルパスの値オブジェクト\nFilePath関連のエラー\nPathとして取得\nパス文字列を取得\n隠しファイル・ディレクトリのチェック\nプラットフォーム固有の不正文字チェック\nパストラバーサル攻撃のチェック\nセキュリティパターンのチェック\nシステムパスのアクセス制限\nファイル拡張子を取得\nファイル名を取得\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nパスを所有権付きで取得\n絶対パスかどうか\nパスが絶対パスかどうか\n相対パスかどうか\n…\nパスを結合\n…\n…\n…\nパスの正規化\n親ディレクトリを取得\n正規化されたパス文字列\n…\nPathBufとして取得\nパスの検証と作成\nGit URLの値オブジェクト\nGitURL関連のエラー\n元のURL文字列を取得\nReturns the argument unchanged.\nReturns the argument unchanged.\nホスト名を取得\nホスト名\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n私設IPアドレスかどうかをチェック\n同じリポジトリを指しているかチェック\n新しいGitUrlインスタンスを作成\nURLを正規化\n組織名を取得\nURLを解析してコンポーネントに分割\nリポジトリ名を取得\nリポジトリパスを取得\nリポジトリパス（組織/リポジトリ名）\nスキームを取得\nURLのスキーム（https、git、ssh等）\nHTTPS形式のURLを生成\nSSH形式のURLを生成\n正規化されたURL文字列\nホスト名のセキュリティ検証\nパスのセキュリティ検証\nURLのセキュリティ検証\nInfrastructure layer modules\nBackup configuration\nConfiguration file metadata\nConfiguration store for managing YAML configuration files\nConfiguration store related errors\nExtended workspace configuration with validation\nSchema validation configuration\nBackup configuration\nBackup file suffix pattern\nClean up old backup files\nCheck if configuration file exists\nCreate backup of configuration file\nWhether to create backup before write\nDelete configuration file\nWhether the file exists\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet configuration file metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast modified time\nList all backup files for a configuration\nMaximum number of backup files to keep\nCreate a new configuration store with default settings\nFile path\nRead any configuration type from YAML file\nRead workspace configuration from YAML file\nFile size in bytes\nPerform strict validation on workspace configuration\nWhether to perform strict validation\nWhether to validate configuration before write\nWhether to validate configuration on read\nValidate workspace configuration\nValidate YAML schema without reading the full config\nValidation configuration\nCreate a new configuration store with custom settings\nWrite any configuration type to YAML file\nWrite workspace configuration to YAML file\nFile operation configuration\nFile operation result\nManifest file metadata\nManifest processing options\nManifest store for managing manifest files and file …\nManifest store related errors\nWhether a backup was created\nBase directory for resolving relative paths\nClean up old backup files\nCreate backup of a file\nWhether to create backup before file operations\nWhether to create parent directories if they don’t exist\nDelete manifest file\nDestination path\nError message if operation failed\nExecute a copy operation\nExecute a symlink operation\nWhether the file exists\nFile operation configuration\nFilter manifest by groups\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet manifest file metadata\nNumber of groups in the manifest\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast modified time\nList groups in manifest\nCheck if manifest file exists\nManifest service for parsing and validation\nMaximum number of backup files to keep\nCreate a new manifest store with default settings\nOperation type (copy, symlink)\nProcessing options\nWhether to overwrite existing files\nFile path\nProcess all file operations from manifest\nProcess file copy operations from manifest\nWhether to process file copy operations\nProcess symlink operations from manifest\nWhether to process symlink operations\nRead and parse manifest from YAML file\nRead manifest from URL\nNumber of repositories in the manifest\nFile size in bytes\nSource path\nWhether the operation was successful\nValidate copy operation paths\nValidate file operations in manifest\nWhether to validate manifest before processing\nWhether to validate file paths before operations\nValidate symlink operation paths\nCreate a new manifest store with custom settings\nCreate a new manifest store with custom manifest service …\nWrite manifest to YAML file\nGit remote operations related errors\nGit remote manager for handling remote operations\nRemote information with additional metadata\nAdd or update a remote (convenience method)\nAdd a new remote\nList of fetch refspecs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the default remote (origin)\nGet optimal URL format based on GitUrl capabilities\nGet information about a specific remote\nGet remote URL for a specific operation (fetch/push)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this remote is the default (origin)\nList all remotes\nRemote name\nCreate a new GitRemoteManager\nCreate a new RemoteInfo\nPrune remote tracking branches\nList of push refspecs\nPush URL (if different from fetch URL)\nCheck if remote exists\nRemove a remote\nRename a remote\nReference to the git2 repository\nUpdate remote push URL\nUpdate remote URL\nValidate and normalize multiple remotes for a repository\nConvert to domain Remote entity\nRemote URL\nUtility functions for remote operations\nValidate remote name according to Git rules\nAdd fetch refspec\nAdd push refspec\nSet push URL (if different from fetch URL)\nCheck if two URLs point to the same repository\nExtract organization and repository name from URL\nNormalize remote name (ensure it follows Git conventions)\nGenerate remote name from URL (useful for auto-naming)\nClone options for repository cloning\nFetch options for repository fetching\nGit branch types\nWrapper around git2::Repository with high-level operations\nGit repository operations related errors\nHard reset - moves HEAD, resets index and working directory\nLocal branches\nMixed reset - moves HEAD and resets index (default)\nRemote tracking branches\nGit repository status information\nGit reset modes\nSoft reset - moves HEAD only\nNumber of ahead commits from upstream\nNumber of behind commits from upstream\nTarget branch to clone\nCalculate ahead/behind commits for current branch\nCheckout a specific branch or commit\nClone a remote repository\nCreate and checkout a new branch\nCurrent branch name\nCurrent commit SHA\nDepth for shallow clone (if shallow is true)\nFast-forward merge with upstream\nFetch changes from remote\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current branch name\nGet the underlying git2 repository\nInitialize a new Git repository\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the working directory is clean\nCheck if working directory has uncommitted changes\nList all branches\nList of modified files\nOpen an existing Git repository\nGet repository path\nRepository path\nProgress callback during clone\nProgress callback during fetch\nWhether to clone recursively (submodules)\nSpecific refs to fetch (if None, fetch all)\nRemote name to fetch from\nThe underlying git2 repository\nReset repository to a specific state\nWhether to perform a shallow clone\nList of staged files\nGet repository status\nList of untracked files\nCommand executor for running external processes\nCommand executor errors\nConfiguration for command execution\nResult of command execution\nTask for parallel execution\nParallel execution configuration\nResult of parallel execution\nAdd task result\nWhether to capture stderr\nWhether to capture stdout\nCommand to execute\nCheck if a command exists in PATH\nExecution configuration\nCreate execution config with working directory and …\nCreate a simple execution task\nGet the current working directory\nEnvironment variables to set for the process\nExecute a single command\nExecute multiple commands in parallel\nExecution time in milliseconds\nExit code of the process\nWhether to stop on first error\nGet failed task results\nNumber of failed tasks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for the task\nWhether to inherit parent process environment\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if all tasks succeeded\nMaximum number of concurrent executions\nCreate a new execution config\nCreate a new execution result\nCreate new parallel config\nCreate a new execution task\nCreate new parallel result\nParse command into program and arguments\nStandard error output\nStandard output\nWhether the command was successful (exit code 0)\nNumber of successful tasks\nResults of individual tasks\nCreate a timeout result\nTimeout for command execution in seconds\nTotal execution time in milliseconds\nWhether to run the command in a shell\nWait for child process to complete and capture output\nSet execution config\nAdd environment variable\nAdd multiple environment variables\nSet fail fast behavior\nSet whether to inherit parent environment\nSet maximum concurrency\nSet output capture flags\nSet whether to use shell for execution\nSet timeout\nSet working directory\nWorking directory for command execution\nApply a new manifest to the workspace\nSecurity audit for dependencies\nwmgr - A tool for managing multiple git repositories\nCLI application runner\nDump the workspace manifest\nRun a command in each repository\nInitialize a new wmgr workspace\nShow commit log for repositories\nShow repository status\nSynchronize repositories\nWorking directory (defaults to current directory)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad workspace from the current directory\nDisable colored output\nEnable verbose output\nArguments for the command\nShow branch information\nCommand to run\nUse compact output format\nContinue execution even if some commands fail\nContinue on vulnerabilities instead of failing\nShow what would be changed without applying\nForce overwrite existing file\nForce sync, ignoring local changes\nForce apply changes without confirmation\nOutput format (yaml or json)\nGroups to sync (if not specified, all groups will be …\nGroups to check (if not specified, all groups will be …\nGroups to run command in (if not specified, all groups …\nGroups to audit (if not specified, all groups will be …\nGroups to show log for (if not specified, all groups will …\nNumber of parallel jobs\nMaximum number of parallel jobs\nMaximum number of parallel audits\nUse manifest.yaml instead of wmgr.yaml\nPath to the new manifest file\nMaximum number of commits to show\nDon’t switch to correct branch\nShow one line per commit\nOutput file path (if not specified, prints to stdout)\nRun commands in parallel\nRun audit in parallel\nDirectory where to create the wmgr.yaml file (defaults to …\nPretty print JSON output\nShow commits since date\nShow commits until date\nHandler for the apply-manifest command\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad workspace from the current directory\nSecurity audit command arguments\nSecurity audit command implementation\nContinue on vulnerabilities instead of failing\nDisplay audit results\nExecute the audit command\nReturns the argument unchanged.\nReturns the argument unchanged.\nTarget groups to audit (comma-separated)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad workspace from directory\nMaximum number of parallel audits\nCreate a new AuditCommand instance\nRun audit in parallel\nEnable verbose output\nWorkspace directory (current directory if not specified)\nHandler for the dump-manifest command\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad workspace from the current directory\nHandler for the foreach command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad workspace from the current directory\nInitialize a new wmgr workspace\nExecute the init command\nForce overwrite existing file\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPath where to create the wmgr.yaml file\nUse manifest.yaml instead of wmgr.yaml\nHandler for the log command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad workspace from the current directory\nHandler for the status command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad workspace from the current directory\nHandler for the sync command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad workspace from the current directory\nDisplay utilities for the CLI interface\nStatus types for display\nClear the current line\nPrompt for confirmation\nCreate a progress bar for operations\nCreate a spinner for indeterminate operations\nPrint a debug message (only if verbose is enabled)\nPrint an error message\nFormat a branch name with appropriate styling\nFormat a command with appropriate styling\nFormat a duration in human-readable format\nFormat a file path with appropriate styling\nFormat a repository name with appropriate styling\nFormat a URL with appropriate styling\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper functions for common display patterns\nPrint an info message\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMove cursor up\nCreate a new DisplayHelper\nPrint error details with context\nPrint an indented message\nPrint a list with bullets\nPrint a status indicator\nPrint a summary box\nPrint a table-like structure\nPrint a section header\nPrint a subsection header\nPrint a success message\nPrint a warning message\nCreate a display helper with color detection\nPrint a command execution result\nPrint repository information\nPrint a separator line")